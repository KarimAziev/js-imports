* js-imports

An Emacs package for importing symbols from JavaScript and TypeScript modules with
[[https://github.com/emacs-helm/helm][helm]] and [[https://github.com/abo-abo/swiper][ivy]] (swiper) interface. Also provides jumping and some refactor actions.

[[./js-imports-demo.gif]]

** Installation

*** straight-use-package

An example of installation and configuration with package managers [[https://github.com/raxod502/straight.el][straight]] and [[https://github.com/jwiegley/use-package][use-package]].

#+BEGIN_SRC elisp :eval never-export

(use-package js-imports
  :init
  (setq-default js-imports-completion-system 'ivy-completing-read)
  (setq-default js-imports-modules-default-names '(("ramda" . "R")
                                                   ("react" . "React")))
  :straight (js-imports
             :type git
             :host github
             :repo "KarimAziev/js-imports")
  :hook ((js-mode . js-imports-mode)
         (js2-mode . js-imports-mode)
         (typescript-mode . js-imports-mode)
         (web-mode . js-imports-mode)
         (js-imports-mode .
                          (lambda ()
                            (add-hook
                             'before-save-hook
                             'js-imports-transform-relative-imports-to-aliases
                             nil t))))
  :bind (:map js-imports-mode-map
              ("C-c C-i" . js-imports)
              ("C-c C-j" . js-imports-jump-to-definition)
              ("C-c C-f" . js-imports-find-file-at-point)
              ("C-c C-." . js-imports-symbols-menu)
              ("C->" . js-imports-transform-import-path-at-point)))

#+END_SRC

*** quelpa
You can also install with quelpa or simply by downloading repo.

#+BEGIN_SRC elisp :eval never-export
(quelpa '(js-imports
        :repo "KarimAziev/js-imports"
        :fetcher git
        :url "git@github.com:KarimAziev/js-imports.git"))
#+END_SRC

** Commands

+ ~js-imports~ :: Main command. Proposes to select a module, extracts exported symbols and inserts to a new or existing import statement with selected candidates. Switching beetwen relative and aliased filenames is bound to "C->" and "C-<".

+ ~js-imports-mode~ :: Turns on/off minor mode.

+ ~js-imports-jump-to-definition~ :: Find and jump to a definition of a symbol at point skipping re-exports and renamings.

+ ~js-imports-symbols-menu~ :: Imenu like command for jumping and some refactor actions for *ivy* and *helm*.

+ ~js-imports-find-file-at-point~ :: Find a file under cursor.

+ ~js-imports-transform-relative-imports-to-aliases~ :: Replace relative paths in import statemetents to aliased ones. An exception is made for imports from current directory.

For example such statements

#+BEGIN_SRC js :eval never-export
import { a, b } from '../fileA';
import { c, d } from './fileB';
#+END_SRC

transforms to:

#+BEGIN_SRC js :eval never-export
import { a, b } from '@/fileA';
import { c, d } from './fileB';
#+END_SRC

+ ~js-imports-transform-import-path-at-point~ :: Replaces path in import statement at point to aliased one or relative.

+ ~js-imports-change-completion~ :: Customize or temporarily set one of available completions systems:
 - helm
 - ivy
 - default

+ ~js-imports-reset-cache~ :: Manually removes cache. It is rarely needed to use, because cache invalidation is managed automatically.

+ ~js-imports-helm-reset-sources~ :: Resets file and symbol sources for *helm*. Use it if some error occured.

** Setup

*** Aliases

There are two ways to configure file aliases:
- automatically with [[https://www.typescriptlang.org/tsconfig#paths][TSConfig file]] (tsconfig.json or jsconfig.json):

No setup needed if a project root directory contains either tsconfig.json or jsconfig.json (or extended ones from this files) with configured paths and baseUrl in the compilerOptions.

For example with such config two aliases will be used: "@" for all files in "./src" directory and "UI" for "./src/components/UI".

#+BEGIN_SRC json :eval never-export
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"],
      "UI/*": ["src/components/UI/*", "src/components/Layout/*"]
    }
  }
}
#+END_SRC

- manually by customizing a varible *js-imports-project-aliases*:

If no tsconfig.json or jsconfig.json found, a varible *js-imports-project-aliases* will be used, which is alist of paired elements. Each of the pairs should associate an alias as property name with expanded path as value.

You can specify aliases as [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html][directory local variable]] to use different settings per project in .dir-locals.el.  For example with such config two aliases will be used: "@" for all files in "./src" directory and "UI" for "./src/components/UI".

#+BEGIN_SRC elisp :eval never-export
((nil .
      ((js-imports-project-aliases . (("@/" "src/")
                                      ("UI/" "src/components/UI/" "src/components/Layout/"))))))
#+END_SRC

** License

Copyright Â© 2020 Karim Aziiev.

Distributed under the [[./LICENSE][GNU General Public License, version 3]]
